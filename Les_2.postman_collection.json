{
	"info": {
		"_postman_id": "cf45ffa5-0de7-4e22-ad2b-717759cd78e5",
		"name": "Les_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "L2_REQ1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body is correct: This is the first responce from server!\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "L2_REQ2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json.\r",
							"var jsonData = pm.response.json();\r",
							"console.log(jsonData);\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Your test name = Alena\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(\"Alena\");\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Your test age = 25\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(\"25\");\r",
							"});\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Your test salary = 10000\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(10000);\r",
							"});\r",
							"\r",
							"//Спарсить request.\r",
							"var req_body = request.data\r",
							"console.log(req_body);\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"var req_name = req_body.name;\r",
							"pm.test(\"Your test name = Alena\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"var req_age = req_body.age;\r",
							"pm.test(\"Your test age = 25\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"var req_salary = req_body.salary;\r",
							"var req_salary_int = +req_salary;\r",
							"pm.test(\"Your test salary = 10000\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(req_salary_int);\r",
							"});\r",
							"\r",
							"//Вывести в консоль параметр family из response\r",
							"console.log(pm.response.json().family);\r",
							" \r",
							"// Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"var u_salary_1_5_year = 40000;\r",
							"pm.test(\"Your salary after 1.5 year = 40000\", function () {\r",
							"pm.expect(jsonData.family.u_salary_1_5_year).to.eql(req_salary * 4);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "L2_REQ5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json.\r",
							"var jsonData = pm.response.json();\r",
							"console.log(jsonData);\r",
							"\r",
							"//Спарсить request.\r",
							"var req_body = request.data\r",
							"console.log(req_body);\r",
							"\r",
							"//Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test('Json has parameter start_qa_salary', function() {\r",
							"pm.expect(jsonData).to.have.property('start_qa_salary');\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test('Json has parameter qa_salary_after_6_months', function() {\r",
							"pm.expect(jsonData).to.have.property('qa_salary_after_6_months');\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test('Json has parameter qa_salary_after_12_months', function() {\r",
							"pm.expect(jsonData).to.have.property('qa_salary_after_12_months');\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test('Json has parameter qa_salary_after_1.5_year', function() {\r",
							"pm.expect(jsonData).to.have.property('qa_salary_after_1.5_year');\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test('Json has parameter qa_salary_after_3.5_years', function() {\r",
							"pm.expect(jsonData).to.have.property('qa_salary_after_3.5_years');\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр person\r",
							"pm.test('Json has parameter person', function() {\r",
							"pm.expect(jsonData).to.have.property('person');\r",
							"});\r",
							"\r",
							"//Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"var req_salary = req_body.salary;\r",
							"var req_salary_int = +req_salary;\r",
							"pm.test(\"start_qa_salary = salary\", function () {\r",
							"    pm.expect(jsonData[\"start_qa_salary\"]).to.eql(req_salary_int);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_6_months = salary*2\", function () {\r",
							"    pm.expect(jsonData[\"qa_salary_after_6_months\"]).to.eql(req_salary_int * 2);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_12_months = salary*2.7\", function () {\r",
							"    pm.expect(jsonData[\"qa_salary_after_12_months\"]).to.eql(req_salary_int * 2.7);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_1.5_year = salary*3.3\", function () {\r",
							"    pm.expect(jsonData[\"qa_salary_after_1.5_year\"]).to.eql(req_salary_int * 3.3);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_3.5_years = salary*3.8\", function () {\r",
							"    pm.expect(jsonData[\"qa_salary_after_3.5_years\"]).to.eql(req_salary_int * 3.8);\r",
							"});\r",
							"\r",
							"//Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"u_name[1] = salary\", function () {\r",
							"    pm.expect(jsonData.person.u_name[\"1\"]).to.eql(req_salary_int);\r",
							"});\r",
							"\r",
							"//Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"var req_age = req_body.age;\r",
							"var req_age_int = +req_age;\r",
							"pm.test(\"u_age = age\", function () {\r",
							"    pm.expect(jsonData.person[\"u_age\"]).to.eql(req_age_int);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"u_salary_5_years = salary*4.2\", function () {\r",
							"    pm.expect(jsonData.person[\"u_salary_5_years\"]).to.eql(req_salary_int * 4.2);\r",
							"});\r",
							"\r",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"\r",
							"let person = pm.response.json().person;\r",
							"pm.test(\"elements from person see in console\", function () {\r",
							"for (let i in person) {\r",
							"    if(Array.isArray (person[i])){\r",
							"        for (let j in person[i]) {\r",
							"            console.log (i+j + \" \" + person[i][j])\r",
							"        }\r",
							"    }\r",
							"    else {\r",
							"        (console.log (i + \" \" + person[i]))\r",
							"    }\r",
							"}});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "L2_REQ3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json\r",
							"var jsonData = pm.response.json();\r",
							"console.log(jsonData);\r",
							"\r",
							"//Спарсить request\r",
							"var req_body = pm.request.toJSON().url.query;\r",
							"console.log(req_body);\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"var req_name = req_body[0].value;\r",
							"pm.test(\"Your test name = Alena\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"var req_age = req_body[1].value;\r",
							"pm.test(\"Your test age = 25\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"var req_salary = req_body[2].value;\r",
							"var req_salary_int = +req_salary;\r",
							"pm.test(\"Your test salary = 10000\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(req_salary_int);\r",
							"});\r",
							"\r",
							"//Вывести в консоль параметр family из response.\r",
							"console.log(pm.response.json().family);\r",
							"\r",
							"//Проверить, что у параметра dog есть параметры name.\r",
							"pm.test('Dog has parameter name', function() {\r",
							"  pm.expect(jsonData).to.have.property('name');\r",
							"});\r",
							"\r",
							"//Проверить, что у параметра dog есть параметры age.\r",
							"pm.test('Dog has parameter age', function() {\r",
							"  pm.expect(jsonData).to.have.property('age');\r",
							"});\r",
							"\r",
							"//Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Dog name = Luky\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"//Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Dog age = 4\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_3?name=Alena&age=25&salary=10000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Alena"
						},
						{
							"key": "age",
							"value": "25"
						},
						{
							"key": "salary",
							"value": "10000"
						},
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "L2_REQ4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json.\r",
							"var jsonData = pm.response.json();\r",
							"console.log(jsonData);\r",
							"\r",
							"//Спарсить request.\r",
							"var req_body = pm.request.toJSON().url.query;\r",
							"console.log(req_body);\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"var req_name = req_body[0].value;\r",
							"pm.test(\"Your test name = Alena\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"var req_age = req_body[1].value;\r",
							"var number_age = +req_age;\r",
							"pm.test(\"Your test age = 25\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(number_age);\r",
							"});\r",
							"\r",
							"//Вывести в консоль параметр salary из request.\r",
							"console.log(req_body[2].value);\r",
							"\r",
							"//Вывести в консоль параметр salary из response.\r",
							"console.log(pm.response.json().salary);\r",
							"\r",
							"//Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(pm.response.json().salary[0]);\r",
							"\r",
							"//Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"var salary_1 = pm.response.json().salary[1];\r",
							"var salary_1_int = +salary_1;\r",
							"console.log(salary_1_int);\r",
							"\r",
							"//Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"var salary_2 = pm.response.json().salary[2];\r",
							"var salary_2_int = +salary_2;\r",
							"console.log(salary_2_int);\r",
							"\r",
							"//Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"var salary_0 = pm.response.json().salary[0];\r",
							"pm.test(\"salary_0 = 10000\", function () {\r",
							"    pm.expect(jsonData.salary[0]).to.eql(salary_0);\r",
							"});\r",
							"\r",
							"//Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"salary_1 = 20000\", function () {\r",
							"    pm.expect(salary_1_int).to.eql(salary_0 * 2);\r",
							"});\r",
							"\r",
							"//Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"salary_2 = 30000\", function () {\r",
							"    pm.expect(salary_2_int).to.eql(salary_0 * 3);\r",
							"});\r",
							"\r",
							"//Создать в окружении переменную name\r",
							"pm.environment.set(\"name\", \"Alena\");\r",
							"\r",
							"//Создать в окружении переменную age\r",
							"pm.environment.set(\"age\", \"25\");\r",
							"\r",
							"//Создать в окружении переменную salary\r",
							"pm.environment.set(\"salary\", \"10000\");\r",
							"\r",
							"//Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", req_body[0].value);\r",
							"console.log(req_body[0].value);\r",
							"\r",
							"//Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", req_body[1].value);\r",
							"console.log(req_body[1].value);\r",
							"\r",
							"//Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", req_body[2].value);\r",
							"console.log(req_body[2].value);\r",
							"\r",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"pm.test(\"elements from salary see in console\", function () {\r",
							"for (let i = 0; i <= 2; i++) {\r",
							"  console.log(pm.response.json().salary[i]) }});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name=Alena&age=25&salary=10000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Alena"
						},
						{
							"key": "age",
							"value": "25"
						},
						{
							"key": "salary",
							"value": "10000"
						},
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	]
}