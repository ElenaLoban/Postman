{
	"info": {
		"_postman_id": "e179c966-328d-4be0-8b52-086ef7aa1bd5",
		"name": "Les_3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "L3_EP1 Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"var jsonData = pm.response.json();\r",
							"var resp_token = jsonData.token;\r",
							"console.log(\"TOKEN = \" + resp_token);\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.environment.set(\"token\", resp_token);\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "alena",
							"type": "text"
						},
						{
							"key": "password",
							"value": "25",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/login",
					"host": [
						"{{url}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "L3_EP2 user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Status code is 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Checking the json structure in the response\r",
							"//1. Parse response body in json\r",
							"var jsonData = pm.response.json();\r",
							"console.log(jsonData);\r",
							"\r",
							"//2. Parse request\r",
							"var req_body = JSON.parse(pm.request.body.raw);\r",
							"console.log(req_body);\r",
							"\r",
							"//3. Пишем json схему используя https://www.liquid-technologies.com/online-json-to-schema-converter\r",
							"var schema = {\r",
							"    \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"person\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"u_age\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"u_name\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"integer\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"integer\"\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"u_age\",\r",
							"        \"u_name\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ]\r",
							"    },\r",
							"    \"qa_salary_after_12_months\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"qa_salary_after_6_months\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"start_qa_salary\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"person\",\r",
							"    \"qa_salary_after_12_months\",\r",
							"    \"qa_salary_after_6_months\",\r",
							"    \"start_qa_salary\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"// 4. Comparing the json schema with the json in the response\r",
							"pm.test(\"json schema = response\", function () {\r",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"//В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент\r",
							"var salary_1 = req_body.salary;\r",
							"var salary_int = +salary_1;\r",
							"pm.test(\"start_qa_salary = salary\", function () {\r",
							"    pm.expect(jsonData.start_qa_salary).to.eql(salary_int);\r",
							"});\r",
							"\r",
							"pm.test(\"qa_salary_after_6_months = salary*2\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(salary_int*2);\r",
							"});\r",
							"\r",
							"pm.test(\"qa_salary_after_12_months = salary*2.9\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(salary_int*2.9);\r",
							"});\r",
							"\r",
							"pm.test(\"u_salary_1_5_year = salary*4\", function () {\r",
							"    pm.expect(jsonData.person.u_salary_1_5_year).to.eql(salary_int*4);\r",
							"});\r",
							"\r",
							"//Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user\r",
							"\r",
							"pm.environment.set(\"salary_for_EP5\", jsonData.person.u_salary_1_5_year);\r",
							"console.log(jsonData.person.u_salary_1_5_year);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"age\": \"{{age}}\",\r\n\"salary\": \"{{salary}}\",\r\n\"name\": \"{{name}}\",\r\n\"auth_token\": \"{{token}}\" \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/user_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "L3_EP3 new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Проверка структуры json в ответе\r",
							"//1. Спарсить response body в json\r",
							"var jsonData = pm.response.json();\r",
							"console.log(jsonData);\r",
							"\r",
							"//2. Спарсить request\r",
							"var req_body = request.data;\r",
							"console.log(req_body);\r",
							"\r",
							"//3. Пишем json схему используя https://www.liquid-technologies.com/online-json-to-schema-converter\r",
							"var schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"salary\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"name\",\r",
							"    \"salary\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"// 4. Сравниваем схему с json в ответе\r",
							"pm.test(\"json schema = response\", function () {\r",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"\r",
							"//В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент\r",
							"var salary_1 = req_body.salary;\r",
							"var salary_int = +salary_1;\r",
							"pm.test(\"salary[0] = salary\", function () {\r",
							"    pm.expect(jsonData.salary[0]).to.eql(salary_int);\r",
							"});\r",
							"\r",
							"var salary_x2 = pm.response.json().salary[1];\r",
							"var salary_x2_int = +salary_x2;\r",
							"pm.test(\"salary[1] = salary*2\", function () {\r",
							"    pm.expect(salary_x2_int).to.eql(salary_int*2);\r",
							"});\r",
							"\r",
							"var salary_x3 = pm.response.json().salary[2];\r",
							"var salary_x3_int = +salary_x3;\r",
							"pm.test(\"salary[2] = salary*3\", function () {\r",
							"    pm.expect(salary_x3_int).to.eql(salary_int*3);\r",
							"});\r",
							"\r",
							"//проверить, что 2-й элемент массива salary больше 1-го и 0-го\r",
							"ShouldBeEqual = {\r",
							"    \"salary_x3>salary_x2\": [true, jsonData.salary[2] > jsonData.salary[1]],\r",
							"    \"salary_x3>salary\": [true, jsonData.salary[2] > jsonData.salary[0]],\r",
							"    };\r",
							"    for (const [salaries, compare] of Object.entries(ShouldBeEqual)) {\r",
							"        pm.test(salaries, function () {\r",
							"         pm.expect(compare[0]).to.eql(compare[1]); \r",
							"         });\r",
							"    }"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "default"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{url}}/new_data",
					"host": [
						"{{url}}"
					],
					"path": [
						"new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "L3_EP5get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Проверка структуры json в ответе\r",
							"//1. Спарсить response body в json\r",
							"var jsonData = pm.response.json();\r",
							"console.log(jsonData);\r",
							"\r",
							"//2. Спарсить request\r",
							"var req_body = request.data;\r",
							"console.log(req_body);\r",
							"\r",
							"//3. Пишем json схему используя https://www.liquid-technologies.com/online-json-to-schema-converter\r",
							"var schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"family\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"children\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"integer\"\r",
							"                }\r",
							"              ]\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"integer\"\r",
							"                }\r",
							"              ]\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"children\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ]\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"salary\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"family\",\r",
							"    \"name\",\r",
							"    \"salary\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"// 4. Сравниваем схему с json в ответе\r",
							"pm.test(\"json schema = response\", function () {\r",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"\r",
							"//Проверить что значение поля name = значению переменной name из окружения\r",
							"pm.test(\"name from response = name from environment\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"name\"));\r",
							"});\r",
							"\r",
							"//Проверить что значение поля age в ответе соответствует отправленному в запросе значению поля age\r",
							"pm.test(\"age from response = age from request\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(req_body.age);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary_for_EP5}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "default"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{url}}/get_test_user",
					"host": [
						"{{url}}"
					],
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "L3_EP4test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Проверка структуры json в ответе\r",
							"//1. Спарсить response body в json\r",
							"var jsonData = pm.response.json();\r",
							"console.log(jsonData);\r",
							"\r",
							"//2. Спарсить request\r",
							"var req_body = request.data;\r",
							"console.log(req_body);\r",
							"\r",
							"//3. Пишем json схему используя https://www.liquid-technologies.com/online-json-to-schema-converter\r",
							"var schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"daily_food\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"daily_sleep\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"daily_food\",\r",
							"    \"daily_sleep\",\r",
							"    \"name\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"// 4. Сравниваем схему с json в ответе\r",
							"pm.test(\"json schema = response\", function () {\r",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"//В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"\r",
							"pm.test(\"daily_food = weight*0.012\", function () {\r",
							"    pm.expect(jsonData.daily_food).to.eql(req_body.weight*0.012);\r",
							"});\r",
							"\r",
							"pm.test(\"daily_sleep = weight*2.5\", function () {\r",
							"    pm.expect(jsonData.daily_sleep).to.eql(req_body.weight*2.5);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "10",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "15",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Meow",
							"type": "default"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{url}}/test_pet_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "L3_EP6 currency",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Можете взять любой объект из присланного списка, используйте js random. В объекте возьмите Cur_ID и передать через окружение в следующий запрос.\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"function currency_list(items)\r",
							"{\r",
							"return items[Math.floor(Math.random()*items.length)];\r",
							"}; \r",
							"var cur_ID_EP7 = currency_list(jsonData).Cur_ID;\r",
							"pm.environment.set(\"cur_ID\", cur_ID_EP7);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{url}}/currency",
					"host": [
						"{{url}}"
					],
					"path": [
						"currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "L3_EP7 curr_byn",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Проверка структуры json в ответе\r",
							"//1. Спарсить response body в json\r",
							"var jsonData = pm.response.json();\r",
							"console.log(jsonData);\r",
							"\r",
							"//2. Спарсить request\r",
							"var req_body = request.data;\r",
							"console.log(req_body);\r",
							"\r",
							"//3. Пишем json схему используя https://www.liquid-technologies.com/online-json-to-schema-converter\r",
							"var schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"Cur_Abbreviation\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"Cur_ID\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"Cur_Name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"Cur_OfficialRate\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"Cur_Scale\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"Date\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"Cur_Abbreviation\",\r",
							"    \"Cur_ID\",\r",
							"    \"Cur_Name\",\r",
							"    \"Cur_OfficialRate\",\r",
							"    \"Cur_Scale\",\r",
							"    \"Date\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"// 4. Сравниваем схему с json в ответе\r",
							"pm.test(\"json schema = response\", function () {\r",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "default"
						},
						{
							"key": "curr_code",
							"value": "328",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{url}}/curr_byn",
					"host": [
						"{{url}}"
					],
					"path": [
						"curr_byn"
					]
				}
			},
			"response": []
		},
		{
			"name": "L3_EP7*** currency",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1) получить список валют\r",
							"var currency_list = pm.response.json();\r",
							"\r",
							"//2) итерировать список валют for  function send request, в каждой итерации отправлять запрос на сервер для получения курса каждой валюты\r",
							"currency_list.forEach((element) => {\r",
							"   pm.sendRequest({\r",
							"       url: 'http://162.55.220.72:5005/curr_byn',\r",
							"       method: 'POST',\r",
							"       body: {\r",
							"           mode: 'formdata',\r",
							"           formdata: [\r",
							"              {key: 'auth_token', value: pm.environment.get(\"token\")},\r",
							"              {key: 'curr_code', value: element[\"Cur_ID\"]},\r",
							"            ]\r",
							"        }\r",
							"    },  (err, resp) =>  {\r",
							"\t    console.log(\"Status code:\" + resp[\"code\"])\r",
							"        if (resp[\"code\"] == 200){\r",
							"\t        var resp_2 = resp.json();\r",
							"\t        if (resp_2.hasOwnProperty(\"Cur_OfficialRate\")) {\r",
							"              console.log(resp_2)\r",
							"\t        }\r",
							"\t    }\r",
							"    })\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "default"
						}
					],
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/currency",
					"host": [
						"{{url}}"
					],
					"path": [
						"currency"
					]
				}
			},
			"response": []
		}
	]
}